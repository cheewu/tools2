log4j.rootLogger=INFO,file
log4j.logger.org.shirdrn.text.fragment.FragmentizeAttractions2=INFO,file
#日志级别
#包括以下六种：FATAL、ERROR、WARN、INFO、DEBUG、TRACE，其中FATAL错误级别最高，TRACE错误级别最低
#设置全局日志级别
log4j.appender.Threshold=INFO
#单个日志类别的级别
log4j.appender.file.Threshold=DEBUG
#使用控制台输出日志
log4j.appender.console=org.apache.log4j.ConsoleAppender
#使用日志文件输出，文件容量超过指定大小则产生一个新的日志文件
log4j.appender.file=org.apache.log4j.RollingFileAppender
#设置日志文件存放位置和名称
log4j.appender.file.File=logs/console.log
#设置每个日志文件大小
log4j.appender.file.MaxFileSize=10240KB
#设置保存备份文件个数
log4j.appender.file.MaxBackupIndex=0
#设置日志输出格式
log4j.appender.console.layout=org.apache.log4j.SimpleLayout
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm} %t %p- %m%n
#Log4j提供的layout有以下几种：
#org.apache.log4j.HTMLLayout（以HTML表格形式布局）
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#在使用org.apache.log4j.PatternLayout（可以灵活地指定布局模式）时可以根据log4j.appender.file.layout.ConversionPattern来指定自定义输出格式
#Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，打印参数如下：
#%m 输出代码中指定的消息
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#%r 输出自应用启动到输出该log信息耗费的毫秒数
#%c 输出所属的类目，通常就是所在类的全名
#%t 输出产生该日志事件的线程名
#%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:m//m:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。